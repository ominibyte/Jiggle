package ca.mcgill.ecse611;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileFilter;
import java.io.FileReader;
import java.io.FilenameFilter;
import java.sql.PreparedStatement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * This class extracts the txt files generated by SLOCCountPerFile and stores then in a MySQL database table
 * @author Richboy
 *
 */
public class SLOCCountPerFileExtractor {
	private JiggleActivityReporter reporter;
	private static final File SLOC_FOLDER = SLOCCountPerFile.SLOC_FOLDER;
	private int empty = 0;
	
	public SLOCCountPerFileExtractor(JiggleActivityReporter reporter){
		this.reporter = reporter;
		
		process();
		
		System.out.println("\n\nDONE!!!");
		
		if( reporter != null )
			reporter.activityFinished(getClass().getName());
	}
	
	public static List<File> filterForTextFiles(File directory){
		List<File> files = new ArrayList<>();
		
		File[] selectedFiles = directory.listFiles(new FileFilter() {
			@Override
			public boolean accept(File file) {
				if( file.isDirectory() || file.getName().trim().toLowerCase().endsWith(".txt") )
					return true;
				return false;
			}
		});
		
		for(File file : selectedFiles){
			if( file.isDirectory() )
				files.addAll(filterForTextFiles(file));
			else
				files.add(file);
		}
		
		return files;
	}
	
	private void process(){
		File[] folders = SLOC_FOLDER.listFiles(new FilenameFilter() {
			@Override
			public boolean accept(File dir, String name) {
				return dir.isDirectory() && !name.startsWith(".");
			}
		});
		
		Arrays.sort(folders, (a, b) -> {
			int n1 = Integer.parseInt(a.getName());
			int n2 = Integer.parseInt(b.getName());
			
			if( n1 > n2 )
				return 1;
			else if( n2 > n1 )
				return -1;
			return 0;
		});
		
		Query q = new Query("INSERT INTO project_file_sloc VALUES (NULL, ?, ?, ?)", Util.mcon);
		PreparedStatement ps = q.getPS();
		
		
		Arrays.stream(folders).forEach(folder -> {
			File[] txtFiles = folder.listFiles(new FilenameFilter() {
				@Override
				public boolean accept(File dir, String name) {
					return name.toLowerCase().trim().endsWith(".txt");
				}
			});
			
			if( txtFiles == null || txtFiles.length == 0 ){
				empty++;
				if( txtFiles == null )
					System.out.println(folder.getAbsolutePath());
				return;
			}
			
			for(File file : txtFiles){
				boolean foundLine = false;
				String line;
				
				try(BufferedReader reader = new BufferedReader(new FileReader(file))){
					while( (line = reader.readLine()) != null ){
						if( foundLine){
							if( !line.contains("java=") )//if this line is not for Java
								continue;
							
							ps.setInt(1, Integer.parseInt(folder.getName()));
							ps.setString(2, file.getAbsolutePath());
							ps.setInt(3, Integer.parseInt(line.trim().split("\\s")[0]));
							ps.executeUpdate();
							
							break;
						}
						
						if( line.trim().toLowerCase().startsWith("sloc") ){
							foundLine = true;
							continue;
						}
					}
				}
				catch(Exception e){
					e.printStackTrace();
				}
			}
		});
		
		q.disconnect();
		
		System.out.println("Total Empty: " + empty);
	}
	
	public static void main(String[] args){
		new SLOCCountPerFileExtractor(null);
	}
}
