package ca.mcgill.ecse611;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.Arrays;

/**
 * This class generates a CSV file with the SLOC Count, 
 * reading through the .txt files generated by David A. Wheeler's SLOCCount tool
 * @author Richboy
 *
 */
public class SLOCCountCSVGenerator {
	private JiggleActivityReporter reporter;
	private static final File SLOC_FOLDER = SLOCCount.SLOC_FOLDER;
	public static final File SLOC_COUNT_FILE = new File(GreenfootRipper.PROJECT_DIRECTORY, "sloccount.csv");
	
	public SLOCCountCSVGenerator(JiggleActivityReporter reporter){
		this.reporter = reporter;
		
		process();
		
		System.out.println("\n\nDONE!!!");
		
		if( reporter != null )
			reporter.activityFinished(getClass().getName());
	}
	
	private void process(){
		File[] txtFiles = SLOC_FOLDER.listFiles(new FilenameFilter() {
			@Override
			public boolean accept(File dir, String name) {
				return name.toLowerCase().trim().endsWith(".txt");
			}
		});
		
		Arrays.sort(txtFiles, (a, b) -> {
			int n1 = Integer.parseInt(a.getName().substring(0, a.getName().indexOf(".")));
			int n2 = Integer.parseInt(b.getName().substring(0, b.getName().indexOf(".")));
			
			if( n1 > n2 )
				return 1;
			else if( n2 > n1 )
				return -1;
			return 0;
		});
		
		
		BufferedWriter writer = null; 
		
		try{
			writer = new BufferedWriter(new FileWriter(SLOC_COUNT_FILE));
			writer.write("Project,SLOC Count");
			writer.newLine();
		}catch(Exception e){}
		
		for(File file : txtFiles){
			boolean foundLine = false;
			String line;
			
			try(BufferedReader reader = new BufferedReader(new FileReader(file))){
				while( (line = reader.readLine()) != null ){
					if( foundLine){
						if( !line.contains("java=") )//if this line is not for Java
							continue;
						
						writer.write(file.getName().substring(0, file.getName().indexOf(".")) + "," + line.trim().split("\\s")[0]);
						writer.newLine();
						break;
					}
					
					if( line.trim().toLowerCase().startsWith("sloc") ){
						foundLine = true;
						continue;
					}
				}
			}
			catch(Exception e){
				e.printStackTrace();
			}
		}
		
		try {
			if( writer != null )
				writer.close();
		} catch (IOException e) {
		}
	}
	
	public static void main(String[] args){
		new SLOCCountCSVGenerator(null);
	}
}
